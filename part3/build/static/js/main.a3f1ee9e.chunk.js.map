{"version":3,"sources":["services/persons.js","components/App.js","index.js"],"names":["baseURL","getPersons","a","request","axios","get","response","data","postPerson","person","post","deletePerson","id","delete","putPerson","newPhonebook","put","Notification","notify","message","className","Persons","filterPersons","handleDelete","map","key","name","number","onClick","PersonForm","setPersons","persons","setMessage","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","existingPerson","find","undefined","window","confirm","personService","then","returnedPerson","setTimeout","catch","error","concat","onChange","target","value","type","App","filter","setFilter","setFilterPersons","useEffect","toLowerCase","indexOf","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3f1ee9e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseURL = \"/api/persons\"\n\nconst getPersons = async () => {\n     const request = axios.get(baseURL)\n     const response = await request\n    return response.data\n}\n\nconst postPerson = async (person) => {\n    const request = axios.post(baseURL,person)\n    const response = await request\n    return response.data\n}\n\nconst deletePerson = async (id) => {\n    const request = axios.delete(`${baseURL}/${id}`)\n    const response = await request\n    return response.data\n}\n\nconst putPerson = async (newPhonebook,id) => {\n    const request = axios.put(`${baseURL}/${id}`,newPhonebook)\n    const response = await request\n    return response.data\n}\nexport default {\n    getPersons,\n    postPerson,\n    deletePerson,\n    putPerson\n}","import React, { useState, useEffect } from 'react'\nimport personService from '../services/persons'\n \nconst Notification = ({notify}) => {\n  if (notify === null) {\n    return null\n  }\n  const {message , className} = notify\n  return (\n    <div className={className}>\n      {message}\n    </div>\n  )\n}\n\nconst Persons = ({filterPersons,handleDelete}) => {\n    return filterPersons.map((person) => <p key={person.id}>{person.name} {person.number} <button onClick={() => handleDelete(person.id,person.name)}>delete</button></p>)\n}\n\nconst PersonForm = ({setPersons, persons, setMessage}) => {\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  \n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const newPhonebook = {\n      name: newName,\n      number: newNumber\n    }\n    const existingPerson = persons.find((person) => person.name === newName)\n    \n    if( existingPerson !== undefined){\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n        personService\n        .putPerson(newPhonebook,existingPerson.id)\n        .then((returnedPerson) => {\n          setPersons(persons.map(person => person.id === returnedPerson.id ? returnedPerson : person))\n          setMessage({message:`Updated ${returnedPerson.name}`, className: 'success'})\n          setTimeout(() => {\n            setMessage(null)\n          },5000)\n        })\n        .catch((error) => {\n          setMessage({message: error.response.data.error,className: 'error'})\n          setTimeout(()=>{\n            setMessage(null)\n          },5000)\n        })\n      }\n    }\n    else{\n      personService\n      .postPerson(newPhonebook)\n      .then((returnedPerson)=>{\n        setPersons(persons.concat(returnedPerson))\n        setMessage({message:`Added ${returnedPerson.name}`, className: 'success'})\n        setTimeout(() => {\n          setMessage(null)\n        },5000)\n      })\n      .catch((error) => {\n        setMessage({message: error.response.data.error,className: 'error'})\n        setTimeout(()=>{\n          setMessage(null)\n        },5000)\n      })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  return (\n      <form onSubmit={handleSubmit}>\n      <div>\n        name: <input \n              onChange={handleNameChange} \n              value={newName}\n              />\n      </div>\n      <div>\n        number: <input \n              onChange={handleNumberChange} \n              value={newNumber}\n              />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ filter, setFilter ] = useState('')\n  const [ filterPersons, setFilterPersons] = useState(persons)\n  const [ message, setMessage ] = useState(null)\n\n  const handleFilterChange = (event) => {\n      setFilter(event.target.value)\n      setFilterPersons(persons.filter((person) => (person.name.toLowerCase().indexOf(event.target.value.toLowerCase()) !== -1 )));\n  }\n\n  const handleDelete = (id,name) => {\n    if(window.confirm(`Delete ${name}`)){\n      personService\n      .deletePerson(id)\n      .then(()=>{\n        personService\n        .getPersons()\n        .then(persons => {\n          setPersons(persons)\n        })\n      })\n      .catch(error => {\n        setMessage({ message:`Information of ${name} has already been removed from server`, className: 'error'})\n        setTimeout(() => {\n          setMessage(null)\n        },5000)\n      })\n    }\n  }\n\n  useEffect(() => {\n      personService\n      .getPersons()\n      .then(persons => {\n        setPersons(persons)\n      })\n      \n  },[])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <div>\n          filter shown with <input onChange={handleFilterChange} value={filter}></input>\n      </div>\n      <Notification notify={message}/>\n      <h2>add a new</h2>\n      <PersonForm setPersons={setPersons} setMessage={setMessage} persons={persons}/>\n      <h2>Numbers</h2>\n      {filter === '' ? <Persons handleDelete={handleDelete} filterPersons={persons}/> : <Persons handleDelete={handleDelete} filterPersons={filterPersons}/>}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}